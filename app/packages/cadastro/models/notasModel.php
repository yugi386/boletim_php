<?php/*|===========================================================================||	MODELO DE DADOS PARA A TABELA           						        ||===========================================================================||																			||	VERSÃO:								1.0.0								||	 																		|	|===========================================================================|*/	Class notasModel extends Model {		public $_tabela = "notas";	//	ATRIBUTO PARA SETAR QUAL A TABELA QUE ESTÁ EM USO			# ---------------------------------------------------------------------------------------------------------------------------------	# METODO 001: [ PUBLIC FUNCTION LISTA REGISTROS ]	# ESTE METODO É RETORNA TODOS OS REGISTROS DO BANCO DE DADOS	# ---------------------------------------------------------------------------------------------------------------------------------				public function listanotas($condicao = null, $qtd = null, $offset = null) {			return $this->read($condicao, $qtd, $offset, 'id ASC');		}			# ---------------------------------------------------------------------------------------------------------------------------------	# METODO 002: [ PUBLIC FUNCTION MOSTRA REGISTRO ]	# ESTE METODO RETORNA UM ÚNICO REGISTRO	# ---------------------------------------------------------------------------------------------------------------------------------						public function notasShow($where) {			return $this->read($where, null, null, 'id ASC');		}	# ---------------------------------------------------------------------------------------------------------------------------------		# METODO DE VALIDACAO DE DADOS: parametro formulario	# ---------------------------------------------------------------------------------------------------------------------------------			public function ValidaDados($form,$campos) {			global $start;						// criando as sessoes para recuperar os dados do usuario:			for ($ct=0;$ct<count($campos);$ct++){			// EVITANDO SQL_INJECTION:				if (isset($_POST[$campos[$ct]]) ) {					$_POST[$campos[$ct]] = $start->NoSqlInject($_POST[$campos[$ct]]);				}				$_SESSION[$campos[$ct]] = (isset($_POST[$campos[$ct]]) ? $_POST[$campos[$ct]] : "");			}				$_SESSION['posic_erro'] = 0;	//	PONTEIRO PARA GERENCIAR VALIDACOES...						// VALIDACAO Campo Vazio			$this->VerErro( $this->ValidarVazio('Primeira Nota', $_POST['p1'], null) );						// VALIDACAO Campo Vazio			$this->VerErro( $this->ValidarVazio('Segunda Nota', $_POST['p1'], null) );						// VALIDACAO Campo Vazio			$this->VerErro( $this->ValidarVazio('Atividade', $_POST['atividade'], null) );			$excluir= array(".");			// VALIDANDO nota 1			$this->VerErro( $this->ValidarNumeroMinimoMaximo('Primeira Nota', $_POST['p1'], 0, 10, null, $excluir) );			// VALIDANDO nota 2			$this->VerErro( $this->ValidarNumeroMinimoMaximo('Segunda Nota', $_POST['p2'], 0, 10, null, $excluir) );					// VALIDANDO atividade			$this->VerErro( $this->ValidarNumeroMinimoMaximo('Atividade', $_POST['atividade'], 0, 10, null, $excluir) );									if ( isset($_SESSION["ERRO0"]) ) {	//	se existe ao menos um erro...				return array('1');	//	retorna o vetor de erros...					} else {				return array();		//	retorna o vetor de erros VAZIO								}			}	}	// fim da classe	?>