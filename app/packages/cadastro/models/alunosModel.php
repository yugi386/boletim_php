<?php/*|===========================================================================||	MODELO DE DADOS PARA A TABELA           						        ||===========================================================================||																			||	VERSÃO:								1.0.0								||	 																		|	|===========================================================================|*/	Class alunosModel extends Model {		public $_tabela = "alunos";	//	ATRIBUTO PARA SETAR QUAL A TABELA QUE ESTÁ EM USO			# ---------------------------------------------------------------------------------------------------------------------------------	# METODO 001: [ PUBLIC FUNCTION LISTA REGISTROS ]	# ESTE METODO É RETORNA TODOS OS REGISTROS DO BANCO DE DADOS	# ---------------------------------------------------------------------------------------------------------------------------------				public function listaalunos($condicao = null, $qtd = null, $offset = null, $ordem = 'id ASC') {			return $this->read($condicao, $qtd, $offset, $ordem);		}			# ---------------------------------------------------------------------------------------------------------------------------------	# METODO 002: [ PUBLIC FUNCTION MOSTRA REGISTRO ]	# ESTE METODO RETORNA UM ÚNICO REGISTRO	# ---------------------------------------------------------------------------------------------------------------------------------						public function alunosShow($where) {			return $this->read($where, null, null, 'id ASC');		}	# ---------------------------------------------------------------------------------------------------------------------------------		# METODO DE VALIDACAO DE DADOS: parametro formulairo	# ---------------------------------------------------------------------------------------------------------------------------------			public function ValidaDados($form,$campos) {			global $start;						// criando as sessoes para recuperar os dados do usuario:			for ($ct=0;$ct<count($campos);$ct++){			// EVITANDO SQL_INJECTION:				if (isset($_POST[$campos[$ct]]) ) {					$_POST[$campos[$ct]] = $start->NoSqlInject($_POST[$campos[$ct]]);				}				$_SESSION[$campos[$ct]] = (isset($_POST[$campos[$ct]]) ? $_POST[$campos[$ct]] : "");			}				$_SESSION['posic_erro'] = 0;	//	PONTEIRO PARA GERENCIAR VALIDACOES...						// VALIDACAO NOME - MINIMO 5 MÁXIMO 70.			$this->VerErro( $this->ValidarStringMinimoMaximo('nome do aluno', $_POST['aluno'], 3, 70, null, null) );						// VALIDANDO matrícula			$this->VerErro( $this->ValidarVazio('matricula',$_POST['matricula'], null) );						// VALIDANDO BAIRRO, NÃO PODE SER VAZIO!			$this->VerErro( $this->ValidarVazio('bairro',$_POST['bairro'], null) );			// VALIDANDO CAMPO CIDADE:			$this->VerErro( $this->ValidarStringMinimoMaximo('cidade', $_POST['cidade'], 3, 70, null, null) );						// VALIDANDO ENDEREÇO:			$this->VerErro( $this->ValidarStringMinimoMaximo('endereco', $_POST['endereco'], 3, 70, null, null) );						// VALIDANDO data, NÃO PODE SER VAZIO!			$this->VerErro( $this->ValidarVazio('dataNascimento',$_POST['dataNascimento'], null) );						// VALIDANDO DATA:			$this->VerErro( $tmp = $this->ValidarData('data de nascimento',$_POST['dataNascimento'], null, null, null) );						// VALIDANDO CEP:			$this->VerErro( $tmp = $this->ValidarCEP('cep', $_POST['cep'], null) );						if ( isset($_SESSION["ERRO0"]) ) {	//	se existe ao menos um erro...				return array('1');	//	retorna o vetor de erros...					} else {				return array();		//	retorna o vetor de erros VAZIO								}			}			}	//	final da classe	?>